  const tooltipAccessor = (event: CalendarEvent) => {
    return {
      title: event.title,
      type: event.interview.type,
      interviewer: event.interview.interviewerName,
      date: format(event.start || new Date(), "MMM dd, yyyy"),
      time: format(event.start || new Date(), "HH:mm"),
    };
  };


components={{
              // ... other components
              eventWrapper: (props: any) => (
                <div className="relative group">
                  {props.children}
                  <AnimatePresence>
                    {props.isSelected && (
                      <EventTooltip event={tooltipAccessor(props.event)} />
                    )}
                  </AnimatePresence>
                </div>
              ),
            }}



                         <div className="min-h-screen h-[calc(100vh-4rem)] md:h-screen bg-white p-2 md:p-4 rounded-lg shadow-md relative overflow-hidden">
        {isLoading && (
          <div className="absolute inset-0 bg-white/50 flex items-center justify-center z-50">
            <Loader2 className="w-8 h-8 animate-spin text-blue-500" />
          </div>
        )}

        {/* Legend - Responsive grid for type colors */}
        <div className="mb-2 md:mb-4 grid grid-cols-2 md:flex md:flex-row gap-2 md:gap-4 p-2">
          {Object.entries(typeColors).map(([type, color]) => (
            <div
              key={type}
              className="flex items-center gap-2 text-xs md:text-sm"
            >
              <div
                className="w-3 h-3 md:w-4 md:h-4 rounded-full"
                style={{ backgroundColor: color }}
              />
              <span>{type}</span>
            </div>
          ))}
        </div>

        {/* Calendar Container */}
        <div className="h-[calc(100%-3rem)] md:h-[calc(100%-4rem)] p-1 md:p-4 overflow-hidden">
          <DnDCalendar
            localizer={localizer}
            events={events}
            defaultView={defaultView}
            views={isMobile ? ["day", "week"] : ["month", "week", "day"]}
            step={60}
            timeslots={1}
            showMultiDayTimes
            onEventDrop={onEventChange}
            onEventResize={onEventChange}
            selectable
            resizable
            popup
            className="responsive-calendar"
            eventPropGetter={eventStyleGetter}
            onSelectSlot={handleSelectSlot}
            components={{
              // ... other components
              eventWrapper: (props: any) => (
                <div className="relative group">
                  {props.children}
                  <AnimatePresence>
                    {props.isSelected && (
                      <EventTooltip event={tooltipAccessor(props.event)} />
                    )}
                  </AnimatePresence>
                </div>
              ),
            }}
          />
        </div>
      </div>

